
Atmega16L_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f7  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000444  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000038  00000000  00000000  00001de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8a:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
{
	uint8_t ret_status_u8 = 0;
	
	/* Configure Baud rate */
	uint16_t baud_u16 = 0;	  
	switch(uart_config_st.baud_b3)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  96:	87 70       	andi	r24, 0x07	; 7
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	21 f0       	breq	.+8      	; 0xa4 <uart_init+0x12>
  9c:	38 f0       	brcs	.+14     	; 0xac <uart_init+0x1a>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	19 f0       	breq	.+6      	; 0xa8 <uart_init+0x16>
  a2:	91 c0       	rjmp	.+290    	; 0x1c6 <uart_init+0x134>
			baud_u16 = BAUD_UBRR(9600);
		}
		break;
		case UART_BAUD_19200:
		{
			baud_u16 = BAUD_UBRR(19200);
  a4:	86 e2       	ldi	r24, 0x26	; 38
  a6:	03 c0       	rjmp	.+6      	; 0xae <uart_init+0x1c>
		}
		break;
		case UART_BAUD_115200:
		{
			baud_u16 = BAUD_UBRR(115200);
  a8:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
  aa:	01 c0       	rjmp	.+2      	; 0xae <uart_init+0x1c>
	uint16_t baud_u16 = 0;	  
	switch(uart_config_st.baud_b3)
	{
		case UART_BAUD_9600:
		{
			baud_u16 = BAUD_UBRR(9600);
  ac:	8d e4       	ldi	r24, 0x4D	; 77
		default:
			return 1; //incorrect baud rate configuration
		break;
	}

	UBRRH = (uint8_t)(baud_u16 >> 8);
  ae:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)(baud_u16 & 0xFF);
  b0:	89 b9       	out	0x09, r24	; 9

	/* Configure UART or USART */
	UCSRC |= (1 << URSEL) | (uart_config_st.usart_mode_b1 << UMSEL);
  b2:	80 b5       	in	r24, 0x20	; 32
  b4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
  b8:	95 fb       	bst	r25, 5
  ba:	22 27       	eor	r18, r18
  bc:	20 f9       	bld	r18, 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	00 24       	eor	r0, r0
  c2:	36 95       	lsr	r19
  c4:	27 95       	ror	r18
  c6:	07 94       	ror	r0
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	07 94       	ror	r0
  ce:	32 2f       	mov	r19, r18
  d0:	20 2d       	mov	r18, r0
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	28 2b       	or	r18, r24
  d6:	20 bd       	out	0x20, r18	; 32
	
	/* Configure Data Length */
	switch(uart_config_st.data_length_b4)
  d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__data_start+0x1>
  dc:	82 95       	swap	r24
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	79 f0       	breq	.+30     	; 0x102 <uart_init+0x70>
  e4:	28 f4       	brcc	.+10     	; 0xf0 <uart_init+0x5e>
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	c1 f0       	breq	.+48     	; 0x11a <uart_init+0x88>
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	31 f0       	breq	.+12     	; 0xfa <uart_init+0x68>
  ee:	6d c0       	rjmp	.+218    	; 0x1ca <uart_init+0x138>
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	59 f0       	breq	.+22     	; 0x10a <uart_init+0x78>
  f4:	89 30       	cpi	r24, 0x09	; 9
  f6:	69 f0       	breq	.+26     	; 0x112 <uart_init+0x80>
  f8:	68 c0       	rjmp	.+208    	; 0x1ca <uart_init+0x138>
			//nothing required to be done in UART control registers
		}
		break;
		case 6:
		{
			UCSRC |= (1 << URSEL) | (1 << UCSZ0);
  fa:	80 b5       	in	r24, 0x20	; 32
  fc:	82 68       	ori	r24, 0x82	; 130
  fe:	80 bd       	out	0x20, r24	; 32
		}
		break;
 100:	0c c0       	rjmp	.+24     	; 0x11a <uart_init+0x88>
		case 7:
		{
			UCSRC |= (1 << URSEL) | (1 << UCSZ1);
 102:	80 b5       	in	r24, 0x20	; 32
 104:	84 68       	ori	r24, 0x84	; 132
 106:	80 bd       	out	0x20, r24	; 32
		}
		break;
 108:	08 c0       	rjmp	.+16     	; 0x11a <uart_init+0x88>
		case 8:
		{
			UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 10a:	80 b5       	in	r24, 0x20	; 32
 10c:	86 68       	ori	r24, 0x86	; 134
 10e:	80 bd       	out	0x20, r24	; 32
		}
		break;
 110:	04 c0       	rjmp	.+8      	; 0x11a <uart_init+0x88>
		case 9:
		{
			UCSRB |= (1 << UCSZ2);
 112:	52 9a       	sbi	0x0a, 2	; 10
			UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 114:	80 b5       	in	r24, 0x20	; 32
 116:	86 68       	ori	r24, 0x86	; 134
 118:	80 bd       	out	0x20, r24	; 32
			return 1; //data length out of range
		break;
	}

	/* Configure Parity Bit */
	switch(uart_config_st.parity_type_b2)
 11a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__data_start+0x1>
 11e:	83 70       	andi	r24, 0x03	; 3
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	41 f0       	breq	.+16     	; 0x134 <uart_init+0xa2>
 124:	50 f0       	brcs	.+20     	; 0x13a <uart_init+0xa8>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	09 f0       	breq	.+2      	; 0x12c <uart_init+0x9a>
 12a:	51 c0       	rjmp	.+162    	; 0x1ce <uart_init+0x13c>
			//nothing required to be done in UART control registers
		}
		break;
		case UART_PARITY_EVEN:
		{
			UCSRC |= (1 << URSEL) | (1 << UPM1); 
 12c:	80 b5       	in	r24, 0x20	; 32
 12e:	80 6a       	ori	r24, 0xA0	; 160
 130:	80 bd       	out	0x20, r24	; 32
		}
		break;
 132:	03 c0       	rjmp	.+6      	; 0x13a <uart_init+0xa8>
		case UART_PARITY_ODD:
		{
			UCSRC |= (1 << URSEL) | (1 << UPM1) | (1 << UPM0); 
 134:	80 b5       	in	r24, 0x20	; 32
 136:	80 6b       	ori	r24, 0xB0	; 176
 138:	80 bd       	out	0x20, r24	; 32
			return 1; //Incorrect parity configuration
		break;
	}
	
	/* Configure Number of Stop Bits */
	UCSRC |= (1 << URSEL) | (uart_config_st.double_stopbit_b1 << USBS);
 13a:	80 b5       	in	r24, 0x20	; 32
 13c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 140:	96 fb       	bst	r25, 6
 142:	44 27       	eor	r20, r20
 144:	40 f9       	bld	r20, 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	80 68       	ori	r24, 0x80	; 128
 156:	48 2b       	or	r20, r24
 158:	40 bd       	out	0x20, r20	; 32

	/* Enable TX and RX */
	switch(uart_config_st.tx_rx_en_b2)
 15a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__data_start+0x1>
 15e:	86 95       	lsr	r24
 160:	86 95       	lsr	r24
 162:	83 70       	andi	r24, 0x03	; 3
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	31 f0       	breq	.+12     	; 0x174 <uart_init+0xe2>
 168:	60 f0       	brcs	.+24     	; 0x182 <uart_init+0xf0>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	29 f0       	breq	.+10     	; 0x178 <uart_init+0xe6>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	29 f0       	breq	.+10     	; 0x17c <uart_init+0xea>
 172:	2f c0       	rjmp	.+94     	; 0x1d2 <uart_init+0x140>
			//nothing required to be done in UART control registers
		}
		break;
		case UART_TX_EN:
		{
			UCSRB |= (1 << TXEN);
 174:	53 9a       	sbi	0x0a, 3	; 10
		}
		break;
 176:	05 c0       	rjmp	.+10     	; 0x182 <uart_init+0xf0>
		case UART_RX_EN:
		{
			UCSRB |= (1 << RXEN);
 178:	54 9a       	sbi	0x0a, 4	; 10
		}
		break;
 17a:	03 c0       	rjmp	.+6      	; 0x182 <uart_init+0xf0>
		case UART_TX_RX_EN:
		{
			UCSRB |= (1 << TXEN) | (1 << RXEN);
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	88 61       	ori	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
			return 1; //Incorrect TX RX Enable Configuration
		break;
	}

	/* Set UART Interrupts */
	switch(uart_config_st.tx_rx_en_b2)
 182:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__data_start+0x1>
 186:	86 95       	lsr	r24
 188:	86 95       	lsr	r24
 18a:	83 70       	andi	r24, 0x03	; 3
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	31 f0       	breq	.+12     	; 0x19c <uart_init+0x10a>
 190:	60 f0       	brcs	.+24     	; 0x1aa <uart_init+0x118>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	29 f0       	breq	.+10     	; 0x1a0 <uart_init+0x10e>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	29 f0       	breq	.+10     	; 0x1a4 <uart_init+0x112>
 19a:	1d c0       	rjmp	.+58     	; 0x1d6 <uart_init+0x144>
			//nothing required to be done in UART control registers
		}
		break;
		case UART_INT_TXEN:
		{
			UCSRB |= (1 << TXCIE);
 19c:	56 9a       	sbi	0x0a, 6	; 10
		}
		break;
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <uart_init+0x118>
		case UART_INT_RXEN:
		{
			UCSRB |= (1 << RXCIE);
 1a0:	57 9a       	sbi	0x0a, 7	; 10
		}
		break;
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <uart_init+0x118>
		case UART_INT_TXRX:
		{
			UCSRB |= (1 << TXCIE) | (1 << RXCIE);
 1a4:	8a b1       	in	r24, 0x0a	; 10
 1a6:	80 6c       	ori	r24, 0xC0	; 192
 1a8:	8a b9       	out	0x0a, r24	; 10
			return 1; //Incorrect Interrupt Configuration
		break;
	}

	/* Configure UART double speed */
	if(!uart_config_st.usart_mode_b1)	
 1aa:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 1ae:	89 2f       	mov	r24, r25
 1b0:	80 72       	andi	r24, 0x20	; 32
 1b2:	95 fd       	sbrc	r25, 5
 1b4:	12 c0       	rjmp	.+36     	; 0x1da <uart_init+0x148>
	{
		UCSRA |= (uart_config_st.double_speed_b1 << U2X);
 1b6:	3b b1       	in	r19, 0x0b	; 11
 1b8:	97 fb       	bst	r25, 7
 1ba:	99 27       	eor	r25, r25
 1bc:	90 f9       	bld	r25, 0
 1be:	99 0f       	add	r25, r25
 1c0:	93 2b       	or	r25, r19
 1c2:	9b b9       	out	0x0b, r25	; 11
 1c4:	08 95       	ret
		{
			baud_u16 = BAUD_UBRR(115200);
		}
		break;
		default:
			return 1; //incorrect baud rate configuration
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
			UCSRB |= (1 << UCSZ2);
			UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
		}
		break;
		default:
			return 1; //data length out of range
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
		{
			UCSRC |= (1 << URSEL) | (1 << UPM1) | (1 << UPM0); 
		}
		break;
		default:
			return 1; //Incorrect parity configuration
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	08 95       	ret
		{
			UCSRB |= (1 << TXEN) | (1 << RXEN);
		}
		break;
		default:
			return 1; //Incorrect TX RX Enable Configuration
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
		{
			UCSRB |= (1 << TXCIE) | (1 << RXCIE);
		}
		break;
		default:
			return 1; //Incorrect Interrupt Configuration
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	08 95       	ret
	if(!uart_config_st.usart_mode_b1)	
	{
		UCSRA |= (uart_config_st.double_speed_b1 << U2X);
	}
	
	return ret_status_u8;
 1da:	80 e0       	ldi	r24, 0x00	; 0
}
 1dc:	08 95       	ret

000001de <system_init>:

uint8_t s_led_timer_u8 = 0;

void system_init()
{
	DDRB = 0x02; //SET PB1 as Output for status led
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	87 bb       	out	0x17, r24	; 23

	/* Enable Global Interrupts */
	SREG |= (1 << 7);
 1e2:	8f b7       	in	r24, 0x3f	; 63
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	8f bf       	out	0x3f, r24	; 63
 1e8:	08 95       	ret

000001ea <status_led_blink>:
}

void status_led_blink()
{
    if(s_led_timer_u8 < 50)
 1ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ee:	82 33       	cpi	r24, 0x32	; 50
 1f0:	20 f4       	brcc	.+8      	; 0x1fa <status_led_blink+0x10>
	{
		s_led_timer_u8++;
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 1f8:	08 95       	ret
	}
	else
	{
		PORTB ^= 0x02; //TOGGLE PB1 for status LED
 1fa:	98 b3       	in	r25, 0x18	; 24
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	89 27       	eor	r24, r25
 200:	88 bb       	out	0x18, r24	; 24
		s_led_timer_u8 = 0;
 202:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 206:	08 95       	ret

00000208 <main>:
	}
}

int main(void)
{
	system_init();
 208:	0e 94 ef 00 	call	0x1de	; 0x1de <system_init>
	
	/* Initialize UART */
	uart_init();
 20c:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	
    /* Replace with your application code */
    while (1) 
    {
		status_led_blink();
 210:	0e 94 f5 00 	call	0x1ea	; 0x1ea <status_led_blink>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e2       	ldi	r24, 0x2F	; 47
 216:	95 e7       	ldi	r25, 0x75	; 117
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x10>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x16>
 21e:	00 00       	nop
 220:	f7 cf       	rjmp	.-18     	; 0x210 <main+0x8>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
